- name: Crear múltiples aliases llamando playbook individual
  hosts: localhost
  gather_facts: no
  vars_files:
    - aliases.yml
    
  tasks:
  
    # filtro el archivo de entrada para evitar duplicados 
    - name: Filtrar aliases únicos por nombre
      set_fact:
        aliases_unicos: "{{ aliases | unique(attribute='name') }}"
    
    # consulto al SW el listado de alias configurados
    - name: Obtener aliases existentes
      raw: aliasshow
      register: aliases_actuales_raw    
   
    # consulto al SW el listado de alias configurados
    - name: Obtener aliases existentes
      raw: aliasshow
      register: aliases_actuales_raw

    # lista de nombre de alias que ya existen en el SW
    - name: Extraer nombres de alias existentes
      set_fact:
        aliases_actuales: "{{ aliases_actuales_raw.stdout_lines | map('regex_search', '^Alias name: (.+)$') | select('string') | list }}"

    # listado de entrada in duplicados y son los que y existen  
    - name: Filtrar aliases que no existen en el switch
      set_fact:
        aliases_para_crear: "{{ aliases_unicos | rejectattr('name', 'in', aliases_actuales) | list }}"

    # llamar al playbook qeu crea el alias
    - name: Crear aliases uno por uno
      ansible.builtin.include_playbook:
        file: crear_alias.yml
      vars:
        alias_name: "{{ item.name }}"
        alias_wwn: "{{ item.wwn }}"
      loop: "{{ aliases }}"
      when: item.name not in aliases_para_crear
    
      
    - name: Procesar salida para extraer nombres de alias
      set_fact:
        aliases_actuales: "{{ aliases_actuales_raw.stdout_lines | map('regex_search', '^Alias name: (.+)$') | select('string') | list }}"
    
    - name: Crear aliases uno por uno
      ansible.builtin.include_playbook:
        file: crear_alias.yml
      vars:
        alias_name: "{{ item.name }}"
        alias_wwn: "{{ item.wwn }}"
      loop: "{{ aliases }}"
      when: item.name not in aliases_actuales
